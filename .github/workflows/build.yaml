name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set release tag
        id: set_tag
        run: |
          tag=$(git rev-parse --short=8 ${{ github.sha }})
          echo "::set-output name=tag::${tag}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_tag.outputs.tag }}
          release_name: ${{ steps.set_tag.outputs.tag }}
          body: ${{ steps.create_release.outputs.message }}
          draft: false
          prerelease: false

  build-freebsd:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      run: rustup update stable

    - name: Install cross-compilation tools
      uses: taiki-e/setup-cross-toolchain-action@v1
      with:
        target: x86_64-unknown-freebsd
    - run: cargo build --release
    - run: cp target/x86_64-unknown-freebsd/release/kodi-random_ep ./rust-kodi-random_ep-freebsd-x86_64
    - run: cp target/x86_64-unknown-freebsd/release/kodi-tvmode ./rust-kodi-tvmode-freebsd-x86_64

    - name: Set release tag
      id: set_tag
      run: |
        tag=$(git rev-parse --short=8 ${{ github.sha }})
        echo "::set-output name=tag::${tag}"

    - name: Get release ID
      id: get_release_id
      run: echo "::set-output name=id::$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.set_tag.outputs.tag }} | jq -r '.id')"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: Binaries
        path: |
          rust-kodi-random_ep-freebsd-x86_64
          rust-kodi-tvmode-freebsd-x86_64

    - name: Attach binaries to release
      id: attach_artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release_id.outputs.id }}/assets?name=rust-koditool-freebsd-x86_64
        asset_path: rust-koditool-freebsd-x86_64
        asset_name: rust-koditool-freebsd-x86_64
        asset_content_type: application/octet-stream

  build-linux:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install OpenSSL Development Packages
      run: sudo apt-get update && sudo apt-get install -y libssl-dev

    - name: Build for Linux x86-64
      run: |
        rustup target add x86_64-unknown-linux-musl
        cargo build --release --target x86_64-unknown-linux-musl
        cp target/x86_64-unknown-linux-musl/release/kodi-random_ep ./rust-kodi-random_ep-linux-x86_64
        cp target/x86_64-unknown-linux-musl/release/kodi-tvmode ./rust-kodi-tvmode-linux-x86_64

    - name: Set release tag
      id: set_tag
      run: |
        tag=$(git rev-parse --short=8 ${{ github.sha }})
        echo "::set-output name=tag::${tag}"

    - name: Get release ID
      id: get_release_id
      run: echo "::set-output name=id::$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.set_tag.outputs.tag }} | jq -r '.id')"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: Binaries
        path: |
          rust-kodi-random_ep-linux-x86_64
          rust-kodi-tvmode-linux-x86_64

    - name: Attach binaries to release
      id: attach_artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release_id.outputs.id }}/assets?name=rust-koditool-linux-x86_64
        asset_path: rust-koditool-linux-x86_64
        asset_name: rust-koditool-linux-x86_64
        asset_content_type: application/octet-stream

  build-macos:
    runs-on: macOS-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Build for macOS
      run: |
        rustup target add x86_64-apple-darwin
        cargo build --release --target x86_64-apple-darwin
        cp target/x86_64-apple-darwin/release/kodi-random_ep ./rust-kodi-random_ep-macos
        cp target/x86_64-apple-darwin/release/kodi-tvmode ./rust-kodi-tvmode-macos

    - name: Set release tag
      id: set_tag
      run: |
        tag=$(git rev-parse --short=8 ${{ github.sha }})
        echo "::set-output name=tag::${tag}"

    - name: Get release ID
      id: get_release_id
      run: echo "::set-output name=id::$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.set_tag.outputs.tag }} | jq -r '.id')"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: Binaries
        path: |
          rust-kodi-random_ep-macos
          rust-kodi-tvmode-macos

    - name: Attach binaries to release
      id: attach_artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release_id.outputs.id }}/assets?name=rust-koditool-macos
        asset_path: rust-koditool-macos
        asset_name: rust-koditool-macos
        asset_content_type: application/octet-stream

  build-windows:
    runs-on: windows-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable-msvc

    - name: Build for Windows x86-64
      run: |
        cargo build --release --target x86_64-pc-windows-msvc
        cp target/x86_64-pc-windows-msvc/release/rust-koditool.exe ./rust-koditool-windows-x86_64.exe

    - name: Set release tag
      id: set_tag
      shell: powershell
      run: |
        $tag = git rev-parse --short=8 ${{ github.sha }}
        Write-Host "::set-output name=tag::$tag"

    - name: Get release ID
      id: get_release_id
      shell: powershell
      run: |
        $tag = '${{ steps.set_tag.outputs.tag }}'
        $url = "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag"
        $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN" }
        $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Get
        Write-Output "::set-output name=id::$($response.id)"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: Binaries
        path: |
          rust-koditool-windows-x86_64.exe

    - name: Attach binaries to release
      id: attach_artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release_id.outputs.id }}/assets?name=rust-koditool-windows-x86_64.exe
        asset_path: rust-koditool-windows-x86_64.exe
        asset_name: rust-koditool-windows-x86_64.exe
        asset_content_type: application/octet-stream
